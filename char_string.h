
/*
 * Christian Schmid
 * CS163 - Data Structures
 * Program 2 - resources.h
 * 
 * Contains all prototypes for the CharString class
 * 
 * CharString class is a wrapper for a char array, allowing easy
 * manipulation through abstracting cstring library functions
 * 
 */

#include <iostream>
#include <cctype>
#include <cstring> 

#ifndef CHARSTR
#define CHARSTR

const int MAX_STR = 256;

class CharString {

    public:
    
        // Constructor / Destructor
        CharString();
        CharString(const char *from);

        ~CharString();

        // The hash code of the CharString
        // generated by adding its char-ASCII values together
        // and mutiplying by -1 if less than 0
        int get_hash_code();

        // Determines whether CharString is empty of data 
        bool is_empty() const;

        // Determines the length of the String
        int length() const;

        // Compares the CharString with another, returning 1 for >
        // -1 for <, or 0 for ==
        // Can ignore case
        int compare(const CharString & other, bool ignore_case = false);

        // Returns data as constant (immutable)
        char *to_char() const;

        // Copies data from supplied String
        // Deep copy - copies not only the reference but the
        // actual data
        void copy_from(const CharString & other);

        // Copies data from supplied char array
        // Deep copy - copies not only the reference but the
        // actual data
        void copy_from(const char *str);

        // Waits for user input, then stores input into CharString
        void from_input();

        // Prints the CharString, using the supplied prefix and
        // Suffix
        // Replacement for cout
        void print(const char *pref, const char *postf);

    private:

        // The char * which contains the data
        char *data;
     
};

#endif
