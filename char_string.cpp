/*
 * Christian Schmid
 * CS163 - Data Structures
 * Program 2 - char_string.cpp
 * 
 * Contains all prototypes for the CharString class
 * 
 * CharString class is a wrapper for a char array, allowing easy
 * manipulation through abstracting cstring library functions
 * 
 */

#include "char_string.h"


// Default constructor - set data to NULL
CharString::CharString() {

    data = NULL;

}

CharString::CharString(const char *from) {

    if( from == NULL ) data = NULL;

    else {

        data = new char[strlen(from) + 1];
        strcpy(data, from);

    }

}

CharString::~CharString() {

    if(data != NULL) delete [] data;

}


// The hash code of the CharString
// generated by adding its char-ASCII values together
// and mutiplying by -1 if less than 0
int CharString::get_hash_code() {

    // If data is NULL, the generated hash code will be 0
    if( data == NULL ) return 0; 

    int hash_code = 0;
    for( int i = 0; data[i] != '\0'; ++i )
        hash_code += tolower(data[i]);

    if( hash_code < 0 ) hash_code *= -1;

    return hash_code;

}

// Determines the length of the CharString
int CharString::length() const {

    // If data is NULL, simply return 0
    if(data == NULL) return 0;

    // If not, return strlen
    return strlen(data);

}

// Determines whether CharString is empty of data
bool CharString::is_empty() const { 

    // If length is 0, return true
    // Length already checks for data being NULL
    // so no need to check here
    return length() == 0;

}

// Returns data as constant (immutable)
// I believe this is similar to a public "get" property with
// a private "set" property
char *CharString::to_char() const {

    return data;

}

// Compares the CharString with another, returning +int for >
// -int for <, or 0 for ==
// Can ignore case
int CharString::compare(const CharString & other, bool ignore_case) {

    if(data != NULL && other.data == NULL) return 1;
    else if(data == NULL && other.data != NULL) return -1;
    else if(data == NULL && other.data == NULL) return 0;
    else {

        if(!ignore_case) return strcmp(data, other.data);
        
        else {

            int index = 0;
            for(; data[index] != '\0' && other.data[index] != '\0'; ++index) {

                char first = tolower(data[index]), second = tolower(other.data[index]);
                if(first < second) return -1;
                else if(first > second) return 1;

            }

            // Test if both end of char arrays were reached
            // If not, return 1 or -1, depending on which ended and which didn't
            // ie ("Hello".compare("Hello!") == -1)
            if(data[index] != '\0') return 1;
            else if(other.data[index] != '\0') return -1;

        }

        return 0;

    }

}

// Copies data from const char array
// Deep copy - CharString's data copies the actual char array
// rather than just the address of the 1st element
void CharString::copy_from(const char *str) {

    // Deallocate CharString's memory if
    // there is any
    if(data != NULL) {

        delete [] data;
        data = NULL;

    }
    
    // If the supplied char array is NULL, process is complete
    // The CharString taking the copy will become NULL, in effect
    // equalling the supplied String
    if(str == NULL) return;

    // If not, copy the contents of the array to String's data
    data = new char[strlen(str) + 1];
    strcpy(data, str);

}

// Copies data from supplied CharString
// Deep copy - copies not only the reference but the
// actual data
void CharString::copy_from(const CharString & other) {

    // Simply call the overload of copy_from, supplying
    // other's data (char *)
    copy_from(other.data);

}

// Waits for user input, then stores input into CharString
void CharString::from_input() {

    using namespace std;

    char temp[MAX_STR];

    copy_from(NULL);

    cin.width(MAX_STR);
    cin.get(temp, MAX_STR, '\n');
    cin.ignore(MAX_STR, '\n');

    copy_from(temp);

}

// Prints the CharString, using the supplied prefix and
// Suffix
// Replacement for cout
void CharString::print(const char *pref, const char *postf) {

    std::cout << pref;

    if( data != NULL ) 
        std::cout << data;

    std::cout << postf;

}